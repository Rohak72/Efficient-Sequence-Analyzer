# backend/serverless.yml

org: rohakj
app: simpliseq-app

# Official name for this specific deployable unit; prefix for resource group in AWS.
service: simpliseq

# Specify the latest version of the Serverless Framework.
frameworkVersion: '4'

provider:
  name: aws
  runtime: python3.12
  region: us-east-2

  # --- Environment Variables ---
  environment:
    DB_S3_BUCKET_NAME: "persistent-seq-db" # SQLite DB storage S3 bucket.
    FASTA_S3_BUCKET_NAME: "fasta-file-storage" # FASTA file storage S3 bucket.
    JOB_QUEUE_URL: !Ref JobQueue
    DYNAMO_TABLE_NAME: !Ref JobStatus

  # --- Permissions (gives Lambda the 'Execution Role' to talk to other AWS services) ---
  iam:
    role:
      statements:
        # Grant read/write operations on the S3 database file.
        - Effect: "Allow"
          Action:
            - "s3:GetObject"
            - "s3:PutObject"
          Resource: "arn:aws:s3:::persistent-seq-db/database/storage.db"

        # Full permission for all user-related files in the FASTA bucket.
        - Effect: "Allow"
          Action: "s3:*"
          Resource: "arn:aws:s3:::fasta-file-storage/*"
        
        # Modify SQS permissions.
        - Effect: "Allow"
          Action:
            - "sqs:SendMessage"
            - "sqs:ReceiveMessage"
            - "sqs:DeleteMessage"
            - "sqs:GetQueueAttributes"
          Resource:
            - Fn::GetAtt: [ JobQueue, Arn ]
        
        # Modify DynamoDB permissions.
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:Scan"
            - "dynamodb:Query"
          Resource:
            - Fn::GetAtt: [ JobStatus, Arn ]
  
  # Encode the backbone for the universal API Gateway trigger with this httpApi section.
  httpApi:
    cors:
      # Specify the exact origins to accept; note that these are both unslashed to limit inconsistency.
      allowedOrigins:
        - 'http://localhost:5173' # Development URL.
        - 'https://simpliseq.vercel.app' # Live Production URL.
      
      # Denote the headers the browser is allowed to send to the backend.
      allowedHeaders:
        - Content-Type
        - Authorization
        - X-Amz-Date
        - X-Api-Key
        - X-Amz-Security-Token
      
      # Allow each of the needed HTTP methods (GET, POST, PUT, DELETE, OPTIONS) for the browser.
      allowedMethods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
      
      # Essential for sending authentication cookies or headers.
      allowCredentials: true

functions:
  api:
    handler: lambda_handler.handler # Point to the handler object inside lambda_handler.py.
    timeout: 29 # Allow function a more generous time block for longer align operations.
    events:
      - httpApi: '*' # Inherit global CORS config from the provider section above.
  
  worker:
    handler: worker_handler.handler
    timeout: 29
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ JobQueue, Arn ]

resources:
  Resources:
    JobQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: alignment-job-queue
    
    JobStatus:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: job-status-table
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: job_id
            AttributeType: S
        KeySchema:
          - AttributeName: job_id
            KeyType: HASH

plugins:
  - serverless-python-requirements # Define an explicit, reliable plugin config for package handling.

custom:
  pythonRequirements:
    dockerizePip: true # Leverage Docker to platform-standardize packages (MacOS -> Linux x86).

package:
  patterns:
    - 'lambda_handler.py'
    - 'worker_handler.py'
    - 'app/**'
    - '!.venv/**' # Dependencies are automatically handled via plugin, no need to specify.
